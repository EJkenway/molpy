from molpy import Frame

class Integrator:
    """
    Basic integrator class template. Uses the typical scheme of propagating
    system momenta in two half steps and system positions in one main step.
    The half steps are defined by default and only the _main_step function
    needs to be specified. Uses atomic time units internally.

    If required, the torch graphs generated by this routine can be detached
    every step via the detach flag.

    Args:
        timestep (float): Integration time step in femto seconds.
    """

    ring_polymer = False
    pressure_control = False

    def __init__(self, timestep: float):
        super(Integrator, self).__init__()
        # Convert fs to internal time units.
        self.timestep = timestep

    def main_step(self, system: Frame):
        """
        Main integration step wrapper routine to make a default detach
        behavior possible. Calls upon _main_step to perform the actual
        propagation of the system.

        Args:
            system (schnetpack.md.Frame): Frame class containing all molecules and their
                             replicas.
        """
        self._main_step(system)

    def half_step(self, system: Frame):
        r"""
        Half steps propagating the system momenta according to:

        ..math::
            p = p + \frac{1}{2} F \delta t

        Args:
            system (schnetpack.md.Frame): Frame class containing all molecules and their
                             replicas.
        """
        system.momenta = system.momenta + 0.5 * system.forces * self.timestep

    def _main_step(self, system: Frame):
        """
        Main integration step to be implemented in derived routines.

        Args:
            system (schnetpack.md.Frame): Frame class containing all molecules and their
                             replicas.
        """
        raise NotImplementedError