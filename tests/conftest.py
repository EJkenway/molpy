# author: Roy Kid
# contact: lijichen365@126.com
# date: 2023-01-29
# version: 0.0.1

from pathlib import Path
import pytest
import subprocess
from molpy import Alias
import numpy as np


@pytest.fixture(name="test_data_path", scope="session")
def find_test_data():

    data_path = Path(__file__).parent / "tests-data"
    if not data_path.exists():
        print("Downloading test data...")
        p = subprocess.Popen(
            f"git clone https://github.com/chemfiles/tests-data.git {data_path.parent}/tests-data",
            shell=True,
        )
        p.wait()
        if p.returncode == 0:
            print("Download test data successfully.")
        else:
            raise RuntimeError("Download test data failed.")

    return data_path


@pytest.fixture
def environment_periodic():
    """
    System representing Argon gas in a box with periodic boundary conditions.
    Neighbor indices, shifts and distance vectors have been precomputed for a cutoff of 5 Angstrom
    """
    cutoff = 2.0
    props = {
        Alias.Z: np.array(np.ones(5) * 18),
        Alias.R: np.array(
            [
                [1.8475400, 3.1888300, 2.88069500],
                [5.1524600, 1.4996200, 4.04490500],
                [3.9796300, 4.4159900, 5.77417500],
                [4.5911200, 4.6424400, 1.67305500],
                [2.1663800, 1.3575600, 6.32694500],
            ],
            dtype=float,
        ),
        Alias.cell: np.array(
            [[7.0, 0.0, 0.0], [0.0, 6.0, 0.0], [0.0, 0.0, 8.0]], dtype=float
        ),
        Alias.pbc: np.array([True, True, True]),
        Alias.n_atoms: np.array([5]),
    }
    neighbors = {
        Alias.idx_i: np.array(
            [
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
            ]
        ),
        Alias.idx_j: np.array(
            [
                4,
                1,
                3,
                3,
                2,
                1,
                4,
                0,
                4,
                3,
                2,
                0,
                2,
                3,
                4,
                1,
                4,
                4,
                3,
                3,
                1,
                0,
                2,
                0,
                1,
                2,
                1,
                0,
                4,
                1,
                2,
                1,
                0,
                3,
                0,
                2,
            ]
        ),
        Alias.offsets: np.array(
            [
                [0.0, 0.0, -8.0],
                [-7.0, 0.0, 0.0],
                [-7.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [7.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, -6.0, 0.0],
                [0.0, -6.0, 0.0],
                [7.0, 0.0, 0.0],
                [0.0, 6.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 6.0, 0.0],
                [0.0, 0.0, 8.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, -8.0],
                [7.0, 0.0, 0.0],
                [0.0, 6.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 6.0, -8.0],
                [-7.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0],
                [0.0, -6.0, 8.0],
                [0.0, 0.0, 8.0],
                [0.0, -6.0, 0.0],
            ],
            dtype=float,
        ),
        Alias.Rij: np.array(
            [
                [0.31884, -1.83127, -4.55375],
                [-3.69508, -1.68921, 1.16421],
                [-4.25642, 1.45361, -1.20764],
                [2.74358, 1.45361, -1.20764],
                [2.13209, 1.22716, 2.89348],
                [3.30492, -1.68921, 1.16421],
                [0.31884, -1.83127, 3.44625],
                [3.69508, 1.68921, -1.16421],
                [-2.98608, -0.14206, 2.28204],
                [-0.56134, 3.14282, -2.37185],
                [-1.17283, 2.91637, 1.72927],
                [-3.30492, 1.68921, -1.16421],
                [-1.17283, -3.08363, 1.72927],
                [-0.56134, -2.85718, -2.37185],
                [4.01392, -0.14206, 2.28204],
                [1.17283, 3.08363, -1.72927],
                [-1.81325, -3.05843, 0.55277],
                [-1.81325, 2.94157, 0.55277],
                [0.61149, 0.22645, 3.89888],
                [0.61149, 0.22645, -4.10112],
                [1.17283, -2.91637, -1.72927],
                [-2.13209, -1.22716, -2.89348],
                [-0.61149, -0.22645, -3.89888],
                [4.25642, -1.45361, 1.20764],
                [0.56134, 2.85718, 2.37185],
                [-0.61149, -0.22645, 4.10112],
                [0.56134, -3.14282, 2.37185],
                [-2.74358, -1.45361, 1.20764],
                [-2.42474, 2.71512, -3.34611],
                [-4.01392, 0.14206, -2.28204],
                [1.81325, 3.05843, -0.55277],
                [2.98608, 0.14206, -2.28204],
                [-0.31884, 1.83127, -3.44625],
                [2.42474, -2.71512, 3.34611],
                [-0.31884, 1.83127, 4.55375],
                [1.81325, -2.94157, -0.55277],
            ],
            dtype=float,
        ),
    }
    return cutoff, props, neighbors


@pytest.fixture
def environment_nonperiodic():
    """
    System representing Argon gas in a box without periodic boundary conditions.
    Neighbor indices, shifts and distance vectors have been precomputed for a cutoff of
    5 Angstrom
    """
    cutoff = 5.0
    props = {
        Alias.Z: np.array(np.ones(5) * 18),
        Alias.R: np.array(
            [
                [1.8475400, 3.1888300, 2.88069500],
                [5.1524600, 1.4996200, 4.04490500],
                [3.9796300, 4.4159900, 5.77417500],
                [4.5911200, 4.6424400, 1.67305500],
                [2.1663800, 1.3575600, 6.32694500],
            ],
            dtype=float,
        ),
        Alias.cell: np.array(
            [[[7.0, 0.0, 0.0], [0.0, 6.0, 0.0], [0.0, 0.0, 8.0]]], dtype=float
        ),
        Alias.pbc: np.array([False, False, False]),
        Alias.n_atoms: np.array([5]),
    }
    neighbors = {
        Alias.idx_i: np.array([0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4]),
        Alias.idx_j: np.array([1, 2, 3, 4, 0, 2, 3, 4, 4, 3, 1, 0, 0, 1, 2, 0, 1, 2]),
        Alias.Rij: np.array(
            [
                [3.30492, -1.68921, 1.16421],
                [2.13209, 1.22716, 2.89348],
                [2.74358, 1.45361, -1.20764],
                [0.31884, -1.83127, 3.44625],
                [-3.30492, 1.68921, -1.16421],
                [-1.17283, 2.91637, 1.72927],
                [-0.56134, 3.14282, -2.37185],
                [-2.98608, -0.14206, 2.28204],
                [-1.81325, -3.05843, 0.55277],
                [0.61149, 0.22645, -4.10112],
                [1.17283, -2.91637, -1.72927],
                [-2.13209, -1.22716, -2.89348],
                [-2.74358, -1.45361, 1.20764],
                [0.56134, -3.14282, 2.37185],
                [-0.61149, -0.22645, 4.10112],
                [-0.31884, 1.83127, -3.44625],
                [2.98608, 0.14206, -2.28204],
                [1.81325, 3.05843, -0.55277],
            ],
            dtype=float,
        ),
    }
    return cutoff, props, neighbors
